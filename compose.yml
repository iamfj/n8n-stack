services:
  postgres:
    image: postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      - POSTGRES_DB=n8n
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  zoo:
    image: confluentinc/cp-zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    env_file:
      - .env
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo:2888:3888
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    env_file:
      - .env
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      zoo:
        condition: service_healthy
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3

  kafka-ui:
    image: provectuslabs/kafka-ui
    restart: unless-stopped
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zoo:2181
    depends_on:
      kafka:
        condition: service_healthy
      zoo:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://host.docker.internal:8080/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  n8n:
    build:
      context: n8n
      dockerfile: Containerfile
      args:
        N8N_VERSION: latest
    restart: unless-stopped
    ports:
      - 5678:5678
    env_file:
      - .env
    environment:
      LOG_LEVEL: debug
      NODE_ENV: production
      DB_TYPE: postgresdb
      DB_POSTGRESDB_DATABASE: postgres
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_SCHEMA: n8n
      N8N_PORT: 5678
      N8N_TEMPLATES_ENABLED: false
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: true
      N8N_RUNNERS_ENABLED: true
    volumes:
      - n8n_data:/home/node/.n8n
      - n8n_local_files:/files
      - ./n8n/credentials.json:/tmp/credentials.json:ro
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://host.docker.internal:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  caddy:
    build:
      context: caddy
      dockerfile: Containerfile
      args:
        CADDY_VERSION: latest
        DOMAIN_NAME: ${DOMAIN_NAME}
        SUBDOMAIN: ${SUBDOMAIN}
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - .env
    volumes:
      - caddy_data:/data
    depends_on:
      n8n:
        condition: service_healthy
      kafka-ui:
        condition: service_healthy

volumes:
  caddy_data:
    # external: true
  n8n_data:
    # external: true
  n8n_local_files:
    # external: true
  postgres_data:
    # external: true
